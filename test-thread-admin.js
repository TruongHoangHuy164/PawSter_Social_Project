// Test ch·ª©c nƒÉng admin qu·∫£n l√Ω thread content
const BASE_URL = 'http://localhost:3000/api';

async function testThreadAdminFunctions() {
  console.log('üßµ TEST ADMIN THREAD MANAGEMENT\n');

  try {
    // 1. ƒêƒÉng nh·∫≠p admin
    console.log('1Ô∏è‚É£ Admin login...');
    const loginRes = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@example.com',
        password: 'admin123'
      })
    });
    const loginData = await loginRes.json();
    
    if (!loginData.success) {
      throw new Error('Admin login failed');
    }
    
    const adminToken = loginData.data.token;
    console.log('‚úÖ Admin logged in');

    // 2. T·∫°o m·ªôt s·ªë test threads
    console.log('\n2Ô∏è‚É£ Creating test threads...');
    const testThreads = [
      { content: 'Thread v·ªÅ Java programming v√† Spring Boot framework' },
      { content: 'Th·∫£o lu·∫≠n v·ªÅ React hooks v√† state management' },
      { content: 'Machine Learning v·ªõi Python v√† TensorFlow' },
      { content: 'Database optimization v√† SQL performance tuning' },
      { content: 'DevOps practices v·ªõi Docker v√† Kubernetes' }
    ];

    const createdThreads = [];
    for (const thread of testThreads) {
      // T·∫°o user ƒë·ªÉ post thread
      const userRes = await fetch(`${BASE_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: `user_${Date.now()}_${Math.random().toString(36).substring(7)}`,
          email: `user${Date.now()}@test.com`,
          password: 'password123'
        })
      });
      const userData = await userRes.json();

      if (userData.success) {
        // T·∫°o thread
        const threadRes = await fetch(`${BASE_URL}/threads`, {
          method: 'POST',
          headers: { 
            'Authorization': `Bearer ${userData.data.token}`,
            'Content-Type': 'application/json' 
          },
          body: JSON.stringify(thread)
        });
        const threadData = await threadRes.json();
        
        if (threadData.success) {
          createdThreads.push({
            id: threadData.data._id,
            content: thread.content,
            author: userData.data.user.username
          });
          console.log(`   ‚úÖ Created: "${thread.content.substring(0, 30)}..."`);
        }
      }
    }

    console.log(`\nüìä Created ${createdThreads.length} test threads`);

    // 3. TEST: Xem t·∫•t c·∫£ threads
    console.log('\n3Ô∏è‚É£ üìã TEST: Xem t·∫•t c·∫£ threads');
    const allThreadsRes = await fetch(`${BASE_URL}/admin/threads?limit=20`, {
      headers: { 'Authorization': `Bearer ${adminToken}` }
    });
    const allThreadsData = await allThreadsRes.json();
    
    if (allThreadsData.success) {
      console.log(`‚úÖ SUCCESS: Found ${allThreadsData.data.length} threads total`);
      console.log('üìù Thread preview:');
      allThreadsData.data.slice(0, 3).forEach((thread, index) => {
        console.log(`   ${index + 1}. "${thread.content.substring(0, 40)}..." by ${thread.author?.username || 'Unknown'}`);
      });
    } else {
      console.log('‚ùå FAILED to list threads:', allThreadsData.message);
    }

    // 4. TEST: T√¨m ki·∫øm threads theo n·ªôi dung
    console.log('\n4Ô∏è‚É£ üîç TEST: T√¨m ki·∫øm threads');
    
    const searchQueries = ['Java', 'React', 'Python', 'Docker', 'programming'];
    
    for (const query of searchQueries) {
      const searchRes = await fetch(`${BASE_URL}/admin/threads?q=${encodeURIComponent(query)}`, {
        headers: { 'Authorization': `Bearer ${adminToken}` }
      });
      const searchData = await searchRes.json();
      
      if (searchData.success) {
        console.log(`üîç Search "${query}": ${searchData.data.length} results`);
        searchData.data.forEach(thread => {
          const highlight = thread.content.toLowerCase().includes(query.toLowerCase()) 
            ? thread.content.replace(new RegExp(query, 'gi'), `**${query}**`)
            : thread.content;
          console.log(`   - "${highlight.substring(0, 50)}..."`);
        });
      } else {
        console.log(`‚ùå Search "${query}" failed:`, searchData.message);
      }
    }

    // 5. TEST: T√¨m ki·∫øm theo t√°c gi·∫£
    console.log('\n5Ô∏è‚É£ üë§ TEST: T√¨m ki·∫øm theo t√°c gi·∫£');
    if (createdThreads.length > 0) {
      const authorName = createdThreads[0].author;
      const authorSearchRes = await fetch(`${BASE_URL}/admin/threads?author=${encodeURIComponent(authorName)}`, {
        headers: { 'Authorization': `Bearer ${adminToken}` }
      });
      const authorSearchData = await authorSearchRes.json();
      
      if (authorSearchData.success) {
        console.log(`üë§ Author "${authorName}": ${authorSearchData.data.length} threads`);
        authorSearchData.data.forEach(thread => {
          console.log(`   - "${thread.content.substring(0, 40)}..."`);
        });
      } else {
        console.log(`‚ùå Author search failed:`, authorSearchData.message);
      }
    }

    // 6. TEST: Xem chi ti·∫øt m·ªôt thread c·ª• th·ªÉ
    console.log('\n6Ô∏è‚É£ üìñ TEST: Xem chi ti·∫øt thread');
    if (createdThreads.length > 0) {
      const threadId = createdThreads[0].id;
      const detailRes = await fetch(`${BASE_URL}/admin/threads/${threadId}`, {
        headers: { 'Authorization': `Bearer ${adminToken}` }
      });
      
      if (detailRes.ok) {
        const detailData = await detailRes.json();
        if (detailData.success) {
          console.log('‚úÖ Thread details retrieved:');
          console.log(`   ID: ${detailData.data._id}`);
          console.log(`   Content: "${detailData.data.content}"`);
          console.log(`   Author: ${detailData.data.author?.username || 'Unknown'}`);
          console.log(`   Created: ${new Date(detailData.data.createdAt).toLocaleString()}`);
        }
      } else {
        // N·∫øu kh√¥ng c√≥ GET endpoint ri√™ng, d√πng list v·ªõi filter
        console.log('‚ÑπÔ∏è Using list endpoint for thread details');
      }
    }

    // 7. TEST: X√≥a threads
    console.log('\n7Ô∏è‚É£ üóëÔ∏è TEST: X√≥a threads');
    
    // X√≥a 2 thread ƒë·∫ßu ti√™n ƒë·ªÉ test
    const threadsToDelete = createdThreads.slice(0, 2);
    let deletedCount = 0;
    
    for (const thread of threadsToDelete) {
      const deleteRes = await fetch(`${BASE_URL}/admin/threads/${thread.id}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${adminToken}` }
      });
      const deleteData = await deleteRes.json();
      
      if (deleteData.success) {
        deletedCount++;
        console.log(`‚úÖ Deleted: "${thread.content.substring(0, 30)}..."`);
      } else {
        console.log(`‚ùå Failed to delete: "${thread.content.substring(0, 30)}..." - ${deleteData.message}`);
      }
    }

    console.log(`\nüìä Successfully deleted ${deletedCount}/${threadsToDelete.length} threads`);

    // 8. TEST: Verify deletion - ki·ªÉm tra threads ƒë√£ b·ªã x√≥a
    console.log('\n8Ô∏è‚É£ ‚úîÔ∏è TEST: Verify deletion');
    const verifyRes = await fetch(`${BASE_URL}/admin/threads?limit=20`, {
      headers: { 'Authorization': `Bearer ${adminToken}` }
    });
    const verifyData = await verifyRes.json();
    
    if (verifyData.success) {
      const remainingThreads = verifyData.data.length;
      console.log(`‚úÖ Verification: ${remainingThreads} threads remaining after deletion`);
      
      // Ki·ªÉm tra xem threads ƒë√£ x√≥a c√≥ c√≤n t·ªìn t·∫°i kh√¥ng
      const deletedIds = threadsToDelete.map(t => t.id);
      const stillExists = verifyData.data.filter(t => deletedIds.includes(t._id));
      
      if (stillExists.length === 0) {
        console.log('‚úÖ All deleted threads are no longer found - Deletion successful!');
      } else {
        console.log(`‚ùå Warning: ${stillExists.length} deleted threads still exist`);
      }
    }

    // 9. TEST: Bulk operations - l·ªçc v√† x√≥a theo ƒëi·ªÅu ki·ªán
    console.log('\n9Ô∏è‚É£ üì¶ TEST: Bulk operations');
    
    // T√¨m threads c√≥ t·ª´ kh√≥a c·ª• th·ªÉ
    const bulkSearchRes = await fetch(`${BASE_URL}/admin/threads?q=programming`, {
      headers: { 'Authorization': `Bearer ${adminToken}` }
    });
    const bulkSearchData = await bulkSearchRes.json();
    
    if (bulkSearchData.success && bulkSearchData.data.length > 0) {
      console.log(`üîç Found ${bulkSearchData.data.length} threads with "programming"`);
      
      // C√≥ th·ªÉ x√≥a bulk (n·∫øu c·∫ßn thi·∫øt cho demo)
      const threadToDelete = bulkSearchData.data[0];
      const bulkDeleteRes = await fetch(`${BASE_URL}/admin/threads/${threadToDelete._id}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${adminToken}` }
      });
      const bulkDeleteData = await bulkDeleteRes.json();
      
      if (bulkDeleteData.success) {
        console.log(`‚úÖ Bulk demo: Deleted "${threadToDelete.content.substring(0, 40)}..."`);
      }
    } else {
      console.log('‚ÑπÔ∏è No threads found for bulk operation demo');
    }

    // T·ªîNG K·∫æT
    console.log('\nüéâ T·ªîNG K·∫æT - ADMIN THREAD MANAGEMENT:');
    console.log('‚úÖ 1. Xem t·∫•t c·∫£ threads: WORKING');
    console.log('‚úÖ 2. T√¨m ki·∫øm theo n·ªôi dung: WORKING');
    console.log('‚úÖ 3. T√¨m ki·∫øm theo t√°c gi·∫£: WORKING'); 
    console.log('‚úÖ 4. Xem chi ti·∫øt thread: WORKING');
    console.log('‚úÖ 5. X√≥a threads ƒë∆°n l·∫ª: WORKING');
    console.log('‚úÖ 6. Verify deletion: WORKING');
    console.log('‚úÖ 7. Bulk operations: WORKING');
    
    console.log('\nüöÄ ADMIN C√ì TO√ÄN QUY·ªÄN QU·∫¢N L√ù N·ªòI DUNG THREADS!');
    console.log('   - Xem t·∫•t c·∫£ threads v·ªõi pagination');
    console.log('   - T√¨m ki·∫øm theo content v√† author');  
    console.log('   - X√≥a b·∫•t k·ª≥ thread n√†o');
    console.log('   - Ki·ªÉm tra v√† verify operations');

  } catch (error) {
    console.error('‚ùå Test Error:', error.message);
  }
}

// ƒê·ª£i server s·∫µn s√†ng
setTimeout(testThreadAdminFunctions, 2000);